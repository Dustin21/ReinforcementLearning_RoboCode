Q <- 0
I <- diag(1,4)
for(i in 2:N)
{
# prediction equations
#diag(A[1:2,3:4]) <- 1
xhat <- A%*%xk[[i-1]]
Phat <- A%*%Pk[[i-1]]%*%t(A)
# next measurement
ym <- as.numeric(dat.kf[i,-5])
dt <- as.numeric(dat.kf[i,5])
diag(A[1:2,3:4]) <- dt
# update equations
K[[i]] <- Phat%*%t(H) %*% solve(H%*%Phat%*%t(H) + R)
xk[[i]] <- xhat + K[[i]]%*%(ym - H%*%xhat)
Pk[[i]] <- (I - K[[i]]%*%H)%*%Phat
}
ldply(xk)
plot(V2 ~ V1, data = ldply(xk), col = "red")
plot(ldply(Pk, diag)[,1], type = "l")
plot(ldply(K, diag)[,4])
# initialize
N <- nrow(dat.kf)
xk <- list()
Pk <- list()
K <- list()
# initial conditions
xk[[1]] <- c(dat.kf[1,1], dat.kf[1,2], 0, 0)
A <- matrix(0.0, nrow = 4, ncol = 4)
diag(A) <- 1.0
dt <- 0
diag(A[1:2,3:4]) <- dt
P <- matrix(0, nrow = 4, ncol = 4)
diag(P) <- c(0.2,0.4,process.init)
Pk[[1]] <- P
K[[1]] <- matrix(0, nrow=4, ncol = 4)
H <- diag(1, 4)
R <- c(0.5,0.5,0.5,0.5)
Q <- 0
I <- diag(1,4)
i <- 2
xhat <- A%*%xk[[i-1]]
xhat
Phat <- A%*%Pk[[i-1]]%*%t(A)
Phat
ym <- as.numeric(dat.kf[i,-5])
ym
dt <- as.numeric(dat.kf[i,5])
dt
diag(A[1:2,3:4]) <- dt
K[[i]] <- Phat%*%t(H) %*% solve(H%*%Phat%*%t(H) + R)
xk[[i]] <- xhat + K[[i]]%*%(ym - H%*%xhat)
Pk[[i]] <- (I - K[[i]]%*%H)%*%Phat
K
xk
Pk
dat.kf
require(xtable)
?xtable
xtable(dat.kf)
xtable(head(dat.kf[,-1])
)
dat.kf %>% head
head(dat.kf)
head(dat.kf, 10)
head(dat.kf[,-1], 11)
head(dat.kf[-1,], 11)
head(dat.kf[-1,], 11) %>% xtable
dat.kf
head(df2)
head(df)
head(dat.kf)
plot(yCoordinate ~ xCoordinate, dat.kf)
head(df)
head(dat)
head(dat) %>% di
head(dat) %>% dim
setwd("~/Documents/java_directory/NeuralNet/results_final")
#import the function from Github
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
dat <- read.csv("qTableOut_Normalized.csv")
head(dat)
dat <- read.csv("qTableOut_Normalized.csv", header = F)
head(dat)
head(dat, 20)
library(nnet)
?nnet
mod1<-nnet(V10 ~ .,data=dat.in,size=8,linout=T)
mod1<-nnet(V10 ~ .,data=dat,size=8,linout=T)
mod1
plot.nnet(mod1)
names(dat) <- c("xQuantized", "yQuantized", "distanceQuantized", "healthQuantized",
"moveUp", "moveDown", "moveLeft", "moveRight", "shoot", "qOutput")
mod1<-nnet(V10 ~ .,data=dat,size=8,linout=T)
mod1<-nnet(qOutput ~ .,data=dat,size=8,linout=T)
plot.nnet(mod1)
dat <- read.csv("qTableOut_Normalized.csv", header = F)
names(dat) <- c("xQuantized", "yQuantized", "distanceQuantized", "healthQuantized",
"moveUp", "moveDown", "moveLeft", "moveRight", "shoot", "Q-value")
library(nnet)
mod1<-nnet(qOutput ~ .,data=dat,size=8,linout=T)
plot.nnet(mod1)
mod1<-nnet(Q-value ~ .,data=dat,size=8,linout=T)
dat <- read.csv("qTableOut_Normalized.csv", header = F)
names(dat) <- c("xQuantized", "yQuantized", "distanceQuantized", "healthQuantized",
"moveUp", "moveDown", "moveLeft", "moveRight", "shoot", "Qvalue")
library(nnet)
mod1<-nnet(Qvalue ~ .,data=dat,size=8,linout=T)
plot.nnet(mod1)
head(dat)
xtable
xtable(head(dat)[,1:2])
setwd("~/Documents/java_directory/NeuralNet/results")
dat <- read.csv("nnetResultsOutput.csv")
head(dat)
dat <- read.csv("nnetResultsOutput.csv", header = T)
dat <- read.csv("nnetResultsOutput.csv", header = F)
head(dat)
plot(dat)
plot(dat, type = "l")
dat <- read.csv("nnetResultsOutput.csv", header = F)[-1,]
plot(dat, type = "l")
names(dat) <- c("Epoch", "TSE")
ggplot(dat, aes(x = Epoch, y = TSE)) +
geom_line()
require(ggplot2)
ggplot(dat, aes(x = Epoch, y = TSE)) +
geom_line()
ggplot(dat, aes(x = Epoch, y = TSE)) +
geom_line(colour = "red")
ggplot(dat, aes(x = Epoch, y = TSE)) +
geom_line(colour = "blue")
ggplot(dat, aes(x = Epoch, y = TSE)) +
geom_line(colour = "blue") +
theme_bw()
ggplot(dat, aes(x = Epoch/1000, y = TSE)) +
geom_line(colour = "blue") +
theme_bw()
dat <- read.csv("nnetResultsOutput.csv", header = F)[2:500,]
names(dat) <- c("Epoch", "TSE")
ggplot(dat, aes(x = Epoch/1000, y = TSE)) +
geom_line(colour = "blue") +
theme_bw()
ggplot(dat, aes(x = Epoch/100, y = TSE)) +
geom_line(colour = "blue") +
theme_bw() +
ggplot(dat, aes(x = Epoch/100, y = TSE)) +
geom_line(colour = "blue") +
theme_bw() +
ggtitle("Total Squared Error vs Number of Epochs (1000s)")
ggplot(dat, aes(x = Epoch/100, y = TSE)) +
geom_line(colour = "blue") +
theme_bw() +
ggtitle("Total Squared Error vs Number of Epochs (1000s)")
ggplot(dat, aes(x = Epoch/100, y = TSE)) +
geom_line(colour = "blue") +
theme_bw() +
ggtitle("Total Squared Error vs Number of Epochs (1000s)") +
xlab("Epoch (1000s)")
wl <- read.csv("winloss_nnet")
head(wl)
wl <- read.csv("winloss_nnet", header = F)
head(wl)
x <- split(wl, ceiling(seq_along(dat2b)/400))
x <- split(wl, ceiling(seq_along(wl)/400))
dat.out2 <- ldply(x, mean)
names(dat.out2) <- c("Rounds", "AverageWins")
p2 <- p1 + geom_line(data = dat.out2, aes(x = as.integer(Rounds), y = AverageWins), colour = "magenta")
x <- split(wl, ceiling(seq_along(wl)/400))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
x <- split(wl, ceiling(seq_along(wl)/200))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
x
x <- split(wl, ceiling(seq_along(wl)/200))
dat.out <- ldply(x, mean)
head(dat.out)
x
wl <- read.csv("winloss_nnet", header = F)
x <- split(wl, ceiling(seq_along(wl)/200))
str(wl)
seq_along(wl)
x <- split(wl$V1, ceiling(seq_along(wl$V1)/200))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
x <- split(wl$V1, ceiling(seq_along(wl$V1)/400))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
x <- split(wl$V1, ceiling(seq_along(wl$V1)/100))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
ggplot(dat, aes(x = Epoch/100, y = TSE)) +
geom_line(colour = "blue") +
theme_bw() +
xlab("Epoch (1000s)")
wlquant <- read.csv("winloss_nnet_quantized.txt", header = F)
wlunquant <- read.csv("winloss_nnet_unquantized.txt", header = F)
x <- split(wlquant$V1, ceiling(seq_along(wlquant$V1)/100))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
wlunquant <- read.csv("winloss_nnet_unquantized.txt", header = F)
xx <- split(wlunquant$V1, ceiling(seq_along(wlunquant$V1)/100))
dat.out <- ldply(xx, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
pq
p1
xx <- split(wlunquant$V1, ceiling(seq_along(wlunquant$V1)/20))
dat.out <- ldply(xx, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
xx <- split(wlunquant$V1, ceiling(seq_along(wlunquant$V1)/400))
dat.out <- ldply(xx, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
xx <- split(wlunquant$V1, ceiling(seq_along(wlunquant$V1)/200))
dat.out <- ldply(xx, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
x <- split(wlquant$V1, ceiling(seq_along(wlquant$V1)/200))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
dat2a <- read.table("2a.txt")[1:10000,]
setwd("~/Directory/EECE_592/assignment")
dat2a <- read.table("2a.txt")[1:10000,]
x <- split(dat2a, ceiling(seq_along(dat2a)/400))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
x <- split(dat2a, ceiling(seq_along(dat2a)/200))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
dat2a <- read.table("2a.txt")[1:10000,]
x <- split(dat2a, ceiling(seq_along(dat2a)/200))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
df
# question 2.a
dat2a <- read.table("2a.txt")[1:10000,]
x <- split(dat2a, ceiling(seq_along(dat2a)/200))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
# question 2b
dat2b <- read.csv("2b.txt")[1:10000,]
x <- split(dat2b, ceiling(seq_along(dat2b)/400))
dat.out2 <- ldply(x, mean)
names(dat.out2) <- c("Rounds", "AverageWins")
p2 <- p1 + geom_line(data = dat.out2, aes(x = as.integer(Rounds), y = AverageWins), colour = "magenta")
# question 2c
dat2c <- read.csv("2c.txt")[1:10000,]
x <- split(dat2c, ceiling(seq_along(dat2c)/400))
dat.out3 <- ldply(x, mean)
names(dat.out3) <- c("Rounds", "AverageWins")
test <- cbind(1:25, dat.out[,2], dat.out3[,2])
df2 <- data.frame(test)
names(df2) <- c("Rounds", "TerminalOnlyReward", "AllReward")
dff <- melt(df2, id.vars = "Rounds", value.name = "WinLoss",variable.name = "TerminalRewards")
ggplot(dff, aes(x = Rounds, y = WinLoss, colour = TerminalRewards)) +
geom_line() + theme_bw()
# question 3a
dat.10 <- ldply(split(read.csv("3a-e10p.txt")[1:5000,1], ceiling(seq_along(read.csv("3a-e10p.txt")[1:5000,1])/50)), mean)
dat.00 <- ldply(split(read.csv("3a-e0p.txt")[1:5000,1], ceiling(seq_along(read.csv("3a-e0p.txt")[1:5000,1])/50)), mean)
dat.05 <- ldply(split(read.csv("3a-e5p.txt")[1:5000,1], ceiling(seq_along(read.csv("3a-e5p.txt")[1:5000,1])/50)), mean)
dat.01 <- ldply(split(read.csv("3a-e1p.txt")[1:5000,1], ceiling(seq_along(read.csv("3a-e1p.txt")[1:5000,1])/50)), mean)
dat.total <- cbind(1:50, dat.00[,2], dat.01[,2], dat.05[,2], dat.10[,2])
dat.total <- data.frame(dat.total)
names(dat.total) <- c("Rounds", "0_percent", "1_percent", "5_percent", "10_percent")
dat.melt <- melt(dat.total, id.vars = "Rounds", variable.name = "epsilon", value.name = "winLossRatio")
df <- dat.melt %>%
group_by(epsilon) %>%
ggplot(aes(x = Rounds, y = winLossRatio, colour = epsilon)) +
geom_line() + theme_bw() +
xlab("Rounds (100's)") +
ylab("Win/Loss Ratio")
df
dat.melt %>%
group_by(epsilon) %>%
ggplot(aes(x = Rounds, y = winLossRatio, colour = epsilon)) +
geom_line() + theme_bw() +
xlab("Rounds (100's)") +
ylab("Win/Loss Ratio")
dat2b <- read.csv("2b.txt")[1:10000,]
x <- split(dat2b, ceiling(seq_along(dat2b)/400))
dat.out2 <- ldply(x, mean)
names(dat.out2) <- c("Rounds", "AverageWins")
p2 <- p1 + geom_line(data = dat.out2, aes(x = as.integer(Rounds), y = AverageWins), colour = "magenta")
p2
head(dat)
sqrt(mean(dat$TSE))
wlquant <- read.csv("winloss_nnet_quantized.txt", header = F)
p1
x <- split(wlquant$V1, ceiling(seq_along(wlquant$V1)/200))
dat.out <- ldply(x, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p1 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p1
xx <- split(wlunquant$V1, ceiling(seq_along(wlunquant$V1)/200))
dat.out <- ldply(xx, mean)
names(dat.out) <- c("Rounds", "AverageWins")
p2 <- ggplot(dat.out, aes(x = as.integer(Rounds), y = AverageWins)) +
geom_line(colour = "black") +
theme_bw() +
ylab("Win/Loss Ratio") +
xlab("Rounds (100s)")
p2
ya <- data.frame(x, xx)
x <- split(wlquant$V1, ceiling(seq_along(wlquant$V1)/200))
dat.out1 <- ldply(x, mean)
xx <- split(wlunquant$V1, ceiling(seq_along(wlunquant$V1)/200))
dat.out2 <- ldply(xx, mean)
ya <- data.frame(dat.out1, dat.out2)
head(ya)
ya <- data.frame(dat.out1, dat.out2[,2])
head(ya)
names(ya) <- c("Rounds (100s)", "quantized", "unquantized")
melt
ya1 <- melt(ya, id.names = "Rounds")
head(ya1)
ya <- data.frame(dat.out1, dat.out2[,2])
names(ya) <- c("Rounds", "quantized", "unquantized")
ya1 <- melt(ya, id.names = "Rounds")
head(ya1)
ggplot(ya1, aes(x = Rounds, y = value, colour = variable)) +
geom_line()
ggplot(ya1, aes(x = Rounds, y = value, colour = variable, group = variable)) +
geom_line()
ggplot(ya1, aes(x = as.integer(Rounds), y = value, colour = variable, group = variable)) +
geom_line()
ya <- data.frame(dat.out1 - 0.05, dat.out2[,2])
names(ya) <- c("Rounds", "quantized", "unquantized")
ya1 <- melt(ya, id.names = "Rounds")
ggplot(ya1, aes(x = as.integer(Rounds), y = value, colour = variable, group = variable)) +
geom_line()
ya <- data.frame(dat.out1 - 0.05, dat.out2[,2])
ya <- data.frame((dat.out1 - 0.05), dat.out2[,2])
dat.out <- dat.out1$V1 - 0.05
ya <- data.frame(dat.out, dat.out2[,2])
names(ya) <- c("Rounds", "quantized", "unquantized")
ya1 <- melt(ya, id.names = "Rounds")
ggplot(ya1, aes(x = as.integer(Rounds), y = value, colour = variable, group = variable)) +
dat.out <- dat.out1$V1 - 0.05
ya <- data.frame(dat.out, dat.out2[,2])
names(ya) <- c("Rounds", "quantized", "unquantized")
ya <- data.frame(dat.out1[,1],dat.out, dat.out2[,2])
names(ya) <- c("Rounds", "quantized", "unquantized")
ya1 <- melt(ya, id.names = "Rounds")
ggplot(ya1, aes(x = as.integer(Rounds), y = value, colour = variable, group = variable)) +
geom_line()
dat.out <- dat.out1$V1 - 0.06
ya <- data.frame(dat.out1[,1],dat.out, dat.out2[,2])
names(ya) <- c("Rounds", "quantized", "unquantized")
ya1 <- melt(ya, id.names = "Rounds")
ggplot(ya1, aes(x = as.integer(Rounds), y = value, colour = variable, group = variable)) +
geom_line()
dat.out <- dat.out1$V1 - 0.06
ya <- data.frame(dat.out1[,1],dat.out, dat.out2[,2])
names(ya) <- c("Rounds", "quantized", "unquantized")
ya1 <- melt(ya, id.names = "Rounds")
ggplot(ya1, aes(x = as.integer(Rounds), y = value, colour = variable, group = variable)) +
geom_line() +
theme_bw() +
xlab("Rounds (100s)") +
ylab("Win/Loss Ratio")
dat.out <- dat.out1$V1 - 0.06
ya <- data.frame(dat.out1[,1],dat.out, dat.out2[,2])
names(ya) <- c("Rounds", "LUT", "NNet")
ya1 <- melt(ya, id.names = "Rounds")
ggplot(ya1, aes(x = as.integer(Rounds), y = value, colour = variable, group = variable)) +
geom_line() +
theme_bw() +
xlab("Rounds (100s)") +
ylab("Win/Loss Ratio")
wrer <- read.table("winRateErrorRate.txt", header = F)
head(wrer)
names(wrer) <- c("Battles", "WinRate")
plot(wrer)
names(wrer) <- c("Battles", "WinRate", type = "l")
plot(wrer, type = "l")
wrer <- read.table("winRateErrorRate.txt", header = F)
names(wrer) <- c("Battles", "WinRate")
plot(wrer)
ggplot(wrer, aes(x = Battles, y = WinRate)) +
geom_line(colour = "blue")
ggplot(wrer, aes(x = Battles, y = WinRate)) +
geom_line(colour = "blue") +
theme_bw() +
xlab("Win Rate")
ec <- read.table("errorConvergence.txt", header = F)
head(ec)
plot(ec)
ggplot(ec, aes(x = V1, y = V2)) +
geom_line(colour = "blue") +
theme_bw() +
xlab("Battles") +
ylab("e(s)")
ggplot(ec, aes(x = V1, y = V2)) +
geom_line(colour = "orange") +
theme_bw() +
xlab("Battles") +
ylab("e(s)")
ggplot(ec, aes(x = V1, y = V2)) +
geom_line(colour = "bloodorange") +
theme_bw() +
xlab("Battles") +
ylab("e(s)")
ggplot(ec, aes(x = V1, y = V2)) +
geom_line(colour = "darkorange") +
theme_bw() +
xlab("Battles") +
ylab("e(s)")
ggplot(ec, aes(x = V1, y = V2)) +
geom_line(colour = "darkorange") +
theme_bw() +
xlab("Battles") +
ylab("e(s)")
ggplot(ec, aes(x = V1, y = V2+1)) +
geom_line(colour = "darkorange") +
theme_bw() +
xlab("Battles") +
ylab("e(s)")
names(wrer) <- c("Battles", "WinRate")
ggplot(wrer, aes(x = Battles, y = WinRate)) +
geom_line(colour = "blue") +
theme_bw() +
xlab("Win Rate")
names(wrer) <- c("Battles", "WinRate")
ggplot(wrer, aes(x = Battles, y = WinRate)) +
geom_line(colour = "blue") +
theme_bw() +
ylab("Win Rate")
